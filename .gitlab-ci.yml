image: node:8

cache:
  paths:
    - node_modules/

variables:
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  CONTAINER_RELEASE_IMAGE_OLD: $CI_REGISTRY_IMAGE:old
  PRODUCTION_CONTAINER_NAME: www_nickbolles_com
  PRODUCTION_APP_URL: https://$PRODUCTION_DOMAIN

stages:
  - build
  - release
  - deploy

build_vue:
  stage: build
  script:
    - cd vue
    - npm install
    - npm run generate
  artifacts:
    name: vue-build
    paths:
      - vue/dist

.build_react:
  stage: build
  script:
    - cd react
    - npm install
    - npm run build
    - mkdir ../public || true
    - mv ./dist ../public/react
  artifacts:
    name: react-build
    paths:
      - public/react

build_old:
  stage: build
  script:
    - echo exporting old
    - mkdir ./public || true
    - mv old/src ./public/old
  artifacts:
    name: old-build
    paths:
      - public/old

build_docker:
  image: docker:git
  stage: release
  script:
    - setup_docker
    - docker build -t $CONTAINER_RELEASE_IMAGE ./vue/
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    refs:
      - master
      
.build_docker_old:
  image: docker:git
  stage: release
  script:
    - setup_docker
    - docker build -t $CONTAINER_RELEASE_IMAGE_OLD ./old
    - docker push CONTAINER_RELEASE_IMAGE_OLD
  only:
    refs:
      - master

pages:
  stage: deploy
  script:
    - echo exporting pages
  artifacts:
    paths:
      - public

production:
  image: docker:git
  stage: deploy
  allow_failure: false
  script:
    - setup_docker
    - cleanup_production
    - deploy_production_vue
  environment:
    name: production
    url: $PRODUCTION_APP_URL
  only:
    refs:
      - master

stop_production:
  image: docker:git
  stage: deploy
  when: manual
  allow_failure: false
  script:
    - setup_docker
    - cleanup_production
  environment:
    name: production
    action: stop
  only:
    refs:
      - master

.setup_scripts: &setup_scripts |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

  # =====Setup Code=====
  function setup_docker() {
    if [[ -n "$CI_JOB_TOKEN" ]]; then
      echo "Logging to GitLab Container Registry with CI Job Token..."
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
      echo ""
    fi
  }

  # =====Production Apps=====
  function deploy_production_vue() {
    # todo: add a weight to Vue and React to do some A/B testing?
    docker run -d --restart='always' \
      -l 'traefik.enable'='true' \
      -l 'traefik.default.frontend.rule'="Host:www.$PRODUCTION_DOMAIN,$PRODUCTION_DOMAIN" \
      -l 'traefik.default.port'="8080" \
      -l 'traefik.vue.frontend.rule'="Host:www.$PRODUCTION_DOMAIN,$PRODUCTION_DOMAIN;PathPrefixStrip:/vue/" \
      -l 'traefik.vue.port'="8080" \
      --net='proxied' \
      --name $PRODUCTION_CONTAINER_NAME \
      $CONTAINER_RELEASE_IMAGE
  }
   function deploy_production_old() {
    # todo: add a weight to Vue and React to do some A/B testing?
    docker run -d --restart='always' \
      -l 'traefik.enable'='true' \
      -l 'traefik.old.frontend.rule'="Host:www.$PRODUCTION_DOMAIN,$PRODUCTION_DOMAIN;PathPrefixStrip:/old/" \
      -l 'traefik.old.port'="8080" \
      --net='proxied' \
      --name $PRODUCTION_CONTAINER_NAME \
      $CONTAINER_RELEASE_IMAGE_OLD
  }

  function cleanup_production() {
    docker stop $PRODUCTION_CONTAINER_NAME || true
    docker rm $PRODUCTION_CONTAINER_NAME || true
  }

before_script:
  - *setup_scripts
